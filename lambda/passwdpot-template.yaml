AWSTemplateFormatVersion: 2010-09-09
Description: Passwd Pot resources
Parameters:
  Topic:
    Description: "Alerts"
    Type: String
    Default: passwd-pot-alerts
  LogzApi:
    Description: logz.io api key
    Type: String
    Default: ''
  S3Key:
    Type: String
    Default: passwdpot.zip
  Debug:
    Type: String
    Default: '0'
  PasswdPotDBInstanceId:
    Type: String
    Default: 'i-0278ddaeaa8cdb8f3'
  ApiId:
    Description: API Gateway App Id. E.g. 1yc6td9zjj
    Type: String
    Default: ''
  PasswdPotDBHost:
    Description: DB username
    Type: String
  PasswdPotDBUsername:
    Description: DB username
    Type: String
    Default: passwdpot
  PasswdPotDBPassword:
    Description: DB password
    Type: String
  PasswdPotDBOptions:
    Description: golang driver options
    Type: String
    Default: sslmod=require&connect_timeout=1
Resources:
  PasswdPotLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  CreateEventPostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: passwdpot-create-event
      Handler: handler
      Role: !GetAtt 
        - PasswdPotLambdaRole
        - Arn
      MemorySize: 128
      Environment:
        Variables:
          PASSWDPOT_DSN: !Join 
            - ''
            - - 'postgres://passwdpot:'
              - !Ref PasswdPotDBPassword
              - '@'
              - !Ref PasswdPotDBHost
              - /passwdpot?
              - !Ref PasswdPotDBOptions
          PASSWDPOT_DEBUG: !Ref Debug
          LOGZ: !Ref LogzApi
      Code:
        S3Bucket: !Join 
          - ''
          - - passwdpot-
            - !Ref 'AWS::Region'
        S3Key: !Ref S3Key
      Runtime: go1.x
      Timeout: 6

  CreateBatchEventsPostLambda:
     Type: 'AWS::Lambda::Function'
     Properties:
       FunctionName: passwdpot-create-batch-events
       Handler: handler
       Role: !GetAtt
         - PasswdPotLambdaRole
         - Arn
       MemorySize: 128
       Environment:
         Variables:
           PASSWDPOT_DSN: !Join
             - ''
             - - 'postgres://passwdpot:'
               - !Ref PasswdPotDBPassword
               - '@'
               - !Ref PasswdPotDBHost
               - /passwdpot?
               - !Ref PasswdPotDBOptions
           PASSWDPOT_DEBUG: !Ref Debug
           LOGZ: !Ref LogzApi
       Code:
         S3Bucket: !Join
           - ''
           - - passwdpot-
             - !Ref 'AWS::Region'
         S3Key: !Ref S3Key
       Runtime: go1.x
       Timeout: 15


  CreateEventPostLambdaStg:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionName: !Ref CreateEventPostLambda
      Name: 'stg'
      FunctionVersion: !GetAtt
        - 'CreateEventPostLambdaVersion'
        - 'Version'

  CreateEventPostLambdaProd:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionName: !Ref CreateEventPostLambda
      Name: 'prod'
      FunctionVersion: !GetAtt
        - 'CreateEventPostLambdaVersion'
        - 'Version'

  CreateBatchEventsPostLambdaStg:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionName: !Ref CreateBatchEventsPostLambda
      Name: 'stg'
      FunctionVersion: !GetAtt
        - CreateBatchEventsPostLambdaVersion
        - 'Version'

  CreateBatchEventsPostLambdaProd:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionName: !Ref CreateBatchEventsPostLambda
      Name: 'prod'
      FunctionVersion: !GetAtt
        -  CreateBatchEventsPostLambdaVersion
        - 'Version'

  CreateBatchEventsPostLambdaVersion:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref CreateBatchEventsPostLambda
      Description: 'Version 1'

  CreateEventPostLambdaVersion:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref CreateEventPostLambda
      Description: 'Version 1'


  CreateBatchEventsPostLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt
        - CreateBatchEventsPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PasswdPotRestApi
          - /*

  CreateBatchEventsPostLambdaPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref CreateBatchEventsPostLambdaProd
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PasswdPotRestApi
          - /*

  CreateBatchEventsPostLambdaPermissionStg:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref CreateBatchEventsPostLambdaStg
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PasswdPotRestApi
          - /*

  CreateEventPostLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt
        - CreateEventPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PasswdPotRestApi
          - /*

  CreateEventPostLambdaPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref CreateEventPostLambdaProd
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PasswdPotRestApi
          - /*

  CreateEventPostLambdaPermissionStg:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref CreateEventPostLambdaStg
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PasswdPotRestApi
          - /*

  DomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: >-
        arn:aws:acm:us-east-1:841424144106:certificate/7fbd5209-6f48-4b80-a71c-10c9b5305181
      DomainName: api.passwd-pot.io
  PasswdPotRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Passwdpot API Gateway
      FailOnWarnings: false
  BasePath:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref PasswdPotRestApi
  EventModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Event
      RestApiId: !Ref PasswdPotRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: Event
        type: object
        additionalProperties: true
        properties:
          time:
            type: number
          user:
            type: string
          passwd:
            type: string
          remoteAddr:
            type: string
          remotePort:
            type: number
          remoteName:
            type: string
          remoteVersion:
            type: string
          originAddr:
            type: string
          application:
            type: string
          protocol:
            type: string
        required:
          - time
          - remoteAddr
          - originAddr
          - application
          - protocol
          - user
  EventResponseModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: EventResponse
      RestApiId: !Ref PasswdPotRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: EventResponse
        type: object
        additionalProperties: false
        properties:
          id:
            type: number
  EventResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref PasswdPotRestApi
      ParentId: !GetAtt 
        - PasswdPotRestApi
        - RootResourceId
      PathPart: event

  BatchEventResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref PasswdPotRestApi
      ParentId: !Ref EventResource
      PathPart: "batch"

  EventPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref PasswdPotRestApi
      ResourceId: !Ref EventResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - CreateEventPostLambda
              - Arn
            - ':${stageVariables.env}'
            - /invocations
        IntegrationResponses:
          - ResponseTemplates:
              application/json: >-
                $input.body
            StatusCode: 202
          - ResponseTemplates:
              application/json: >-
                #set($body = $util.parseJson($inputRoot))
                ##$body['headers']
                $body['body']
            SelectionPattern: ".*\"statusCode\":500.*"
            StatusCode: 500
          - ResponseTemplates:
              application/json: >-
                #set($inputRoot = $input.path('$.errorMessage'))
                #set($body = $util.parseJson($inputRoot))
                ##$body['headers']
                $body['body']
            SelectionPattern: ".*\"statusCode\":400.*"
            StatusCode: 400
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: >-
            #set($requestBody = $util.parseJson($input.json('$')))
            { #foreach($item in $requestBody.keySet()) #set($jsonPath =  "$.$item") "$item" : $input.json($jsonPath), #end
            "originAddr" : "$context.identity.sourceIp"
            }            
      RequestModels:
        application/json: !Ref EventModel
      MethodResponses:
        - ResponseModels:
            application/json: !Ref EventResponseModel
          StatusCode: 202
        - ResponseModels:
            application/json: !Ref EventResponseModel
          StatusCode: 500
        - ResponseModels:
            application/json: !Ref EventResponseModel
          StatusCode: 400

  BatchEventPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref PasswdPotRestApi
      ResourceId: !Ref BatchEventResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - CreateBatchEventsPostLambda
              - Arn
            - ':${stageVariables.env}'
            - /invocations
        IntegrationResponses:
          - ResponseTemplates:
              application/json: >-
                $input.body
            StatusCode: 202
          - ResponseTemplates:
              application/json: >-
                #set($body = $util.parseJson($inputRoot))
                ##$body['headers']
                $body['body']
            SelectionPattern: ".*\"statusCode\":500.*"
            StatusCode: 500
          - ResponseTemplates:
              application/json: >-
                #set($inputRoot = $input.path('$.errorMessage'))
                #set($body = $util.parseJson($inputRoot))
                ##$body['headers']
                $body['body']
            SelectionPattern: ".*\"statusCode\":400.*"
            StatusCode: 400
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: >-
            {
              "originAddr": "$context.identity.sourceIp",
              "events": $input.body
            }
      RequestModels:
        application/json: !Ref EventModel
      MethodResponses:
        - ResponseModels:
            application/json: !Ref EventResponseModel
          StatusCode: 202
        - ResponseModels:
            application/json: !Ref EventResponseModel
          StatusCode: 500
        - ResponseModels:
            application/json: !Ref EventResponseModel
          StatusCode: 400


  RestApiStageStg:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: 'stg'
      Description: 'staging'
      RestApiId: !Ref PasswdPotRestApi
      DeploymentId: !Ref RestApiDeployment
      Variables:
        env: stg

  RestApiStageProd:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: 'v1'
      Description: 'production'
      RestApiId: !Ref PasswdPotRestApi
      DeploymentId: !Ref RestApiDeployment
      Variables:
        env: prod

  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: EventPost
    Properties:
      RestApiId: !Ref PasswdPotRestApi
      StageName: dev
  
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: "90% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 1
      Threshold: 90
      AlarmActions:
        - !Join
            - '' 
            - - 'arn:aws:sns:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref Topic
      Dimensions:
        - Name: InstanceId
          Value: !Ref PasswdPotDBInstanceId
      ComparisonOperator: GreaterThanThreshold
  
  CPUCreditsLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: "< 200 credits"
      MetricName: CPUCreditBalance
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 180
      TreatMissingData: notBreaching
      AlarmActions: 
        - !Join   
          - '' 
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      Dimensions:
        - Name: InstanceId
          Value: !Ref PasswdPotDBInstanceId
      ComparisonOperator: LessThanThreshold
    
  PasswdPotCreateErrorLambdaAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: "Error Count"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: .015
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: passwdpot-create-event
        - Name: Resource
          Value: passwdpot-create-event:prod
      AlarmActions:
        - !Join   
          - '' 
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      ComparisonOperator: GreaterThanThreshold

  PasswdPotCreateDurationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Trigger an alarm if the duration is over 500ms"
      MetricName: "Duration"
      Namespace: "AWS/Lambda"
      TreatMissingData: notBreaching
      Dimensions:
                -
                  Name: "FunctionName"
                  Value: passwdpot-create-event
                -
                  Name: "Resource"
                  Value: passwdpot-create-event:prod
      Statistic: "Average"
      AlarmActions:
        - !Join
          - ''
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1000
      ComparisonOperator: "GreaterThanThreshold"

  PasswdPotCreateThrottleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Trigger an alarm if a throttle is recorded"
      MetricName: Throttles
      Namespace: AWS/Lambda
      TreatMissingData: notBreaching
      Dimensions:
        -
          Name: "FunctionName"
          Value: passwdpot-create-event
        -
          Name: "Resource"
          Value: passwdpot-create-event:prod
      Statistic: "Sum"
      AlarmActions:
        - !Join
          - ''
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: "GreaterThanThreshold"

  PasswdPotCreateErrorLambdaAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: "Error Count"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: passwdpot-create-batch-events
        - Name: Resource
          Value: passwdpot-create-batch-events:prod
      AlarmActions:
        - !Join
          - ''
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      ComparisonOperator: GreaterThanThreshold

  PasswdPotCreateBatchDurationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Trigger an alarm if the duration is over 500ms"
      MetricName: "Duration"
      Namespace: "AWS/Lambda"
      TreatMissingData: notBreaching
      Dimensions:
                -
                  Name: "FunctionName"
                  Value: passwdpot-create-batch-events
                -
                  Name: "Resource"
                  Value: passwdpot-create-batch-events:prod
      Statistic: "Average"
      AlarmActions:
        - !Join
          - ''
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      Period: 60
      EvaluationPeriods: 1
      Threshold: 3000
      ComparisonOperator: "GreaterThanThreshold"

  PasswdPotCreateThrottleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Trigger an alarm if a throttle is recorded"
      MetricName: "Throttles"
      Namespace: "AWS/Lambda"
      TreatMissingData: notBreaching
      Dimensions:
        -
          Name: "FunctionName"
          Value: passwdpot-create-batch-events
        -
          Name: "Resource"
          Value: passwdpot-create-batch-events:prod
      Statistic: "Sum"
      AlarmActions:
        - !Join
          - ''
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref Topic
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: "GreaterThanThreshold"
#  PasswdPotCreateLogGroup:
#    Type: "AWS::Logs::LogGroup"
#    Properties:
#      LogGroupName: /aws/lambda/passwdpot-create-event

  PasswdPotCreateMaxMemoryUsed:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: CreateEventPostLambda
    Properties:
      LogGroupName: /aws/lambda/passwdpot-create-event
      FilterPattern: "[..., maxMemoryLabel=\"Used:\", maxMemory, maxMemoryUnit=MB]"
      MetricTransformations:
        -
          MetricValue: "$maxMemory"
          MetricNamespace: passwdpot-create-event
          MetricName: "MaxMemoryUsedMB"

  PasswdPotCreateMemorySize:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: CreateEventPostLambda
    Properties:
      LogGroupName: /aws/lambda/passwdpot-create-event
      FilterPattern: "[..., sizeLabel=\"Size:\", sizeMemory, sizeMemoryUnit=MB, maxLabel, memoryLabel, maxMemoryLabel=\"Used:\", maxMemory, maxMemoryUnit=MB]"
      MetricTransformations:
        -
          MetricValue: "$sizeMemory"
          MetricNamespace: passwdpot-create-event
          MetricName: "MemorySizeMB"

  PasswdPotCreateBatchMaxMemoryUsed:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: CreateEventPostLambda
    Properties:
      LogGroupName: /aws/lambda/passwdpot-create-batch-events
      FilterPattern: "[..., maxMemoryLabel=\"Used:\", maxMemory, maxMemoryUnit=MB]"
      MetricTransformations:
        -
          MetricValue: "$maxMemory"
          MetricNamespace: passwdpot-create-event
          MetricName: "MaxMemoryUsedMB"

  PasswdPotCreateBatchMemorySize:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: CreateEventPostLambda
    Properties:
      LogGroupName: /aws/lambda/passwdpot-create-batch-events
      FilterPattern: "[..., sizeLabel=\"Size:\", sizeMemory, sizeMemoryUnit=MB, maxLabel, memoryLabel, maxMemoryLabel=\"Used:\", maxMemory, maxMemoryUnit=MB]"
      MetricTransformations:
        -
          MetricValue: "$sizeMemory"
          MetricNamespace: passwdpot-create-event
          MetricName: "MemorySizeMB"

  PasswdPotBatchCreateMemorySize:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: CreateEventPostLambda
    Properties:
      LogGroupName: /aws/lambda/passwdpot-create-batch-events
      FilterPattern: "[..., sizeLabel=\"Size:\", sizeMemory, sizeMemoryUnit=MB, maxLabel, memoryLabel, maxMemoryLabel=\"Used:\", maxMemory, maxMemoryUnit=MB]"
      MetricTransformations:
        -
          MetricValue: "$sizeMemory"
          MetricNamespace: passwdpot-create-batch-events
          MetricName: "MemorySizeMB"


Outputs:
  LambdaArn:
    Value: !GetAtt 
      - CreateEventPostLambda
      - Arn

